<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $window, $location, spUtil, $rootScope) {
	spUtil.setSearchPage($scope.data.t);
	$scope.showScore = $scope.options.show_score == 'true' || $scope.options.show_score == true;
	$scope.latitude = null;
	$scope.longitude = null;
	$scope.isLocationTrackerDisabled = $scope.data.isLocationTrackerDisabled === "true";

	$scope.getBGImage = function(item) {
		return {"background-image": "url('" + item.picture + "')"};
	}

	$scope.search = function(searchTerm) {
		$location.search('q', searchTerm);
	}

	$scope.highlight = function(haystack, needle) {
		if (!haystack)
			return "";

		if (!needle)
			return haystack;

		return haystack.replace(new RegExp(needle.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1"), "gi"), function(match) {
			return '<span class="highlight mark">' + match + '</span>';
		});
	}

	$scope.escapeHTML = function(value) {
		var entityMap = {
					"&": "&amp;",
					"<": "&lt;",
					">": "&gt;",
					'"': '&quot;',
					"'": '&#39;',
					"/": '&#x2F;'
				};
		if (!value) return value;
		value = String(value).replace(/[&<>"'\/]/g, function (s) {
        		return entityMap[s];
        	});

		return value;
	}

	function setUserLocationCoords(cb) {
		var onSuccess = function(pos) {
			return cb({
				latitude: pos.coords.latitude,
				longitude: pos.coords.longitude
			})
		};

		var onError = function() {
			return cb({
				latitude: null,
				longitude: null	
			});
		};

		if (window.navigator.geolocation) {
			window.navigator.geolocation.getCurrentPosition(onSuccess, onError, {
			enableHighAccuracy: true
		});
	}
	}

	if(!$scope.isLocationTrackerDisabled){
		setUserLocationCoords(function(coords) {
			$scope.latitude = coords.latitude;
			$scope.longitude = coords.longitude;
			
			// Track Search Event with Location coordinates
			trackSearchEvent();

		});
	} else {
		//Track Search Event without location coordinates
		trackSearchEvent();
	}
	
	function trackSearchEvent() {
		var c = $scope;

		var payload =  {
			query: _.get(c, 'data.q'),
			portal_id: _.get(c, 'portal.sys_id'),
			page_id: _.get($window, 'spSearchAnalytics.page_id', c.page.id),
			refinement_occurred: false, // refinement cannot occur in this widget since no facets are available
			browser_info: $window.navigator.userAgent,
			location: {
				latitude: $scope.latitude,
				longitude: $scope.longitude
			},
			search_results: getSearchResultsSignals($scope),
			results_per_source: getSearchSources($scope)
		}

		var payloadObject = {
			action: "GlideSPSearchAnalytics",
			payload: payload
		};
		c.server.get(payloadObject);
	}

	function getSearchSources($scope) {
		var c = $scope;
		var sources = {};
		if (c.data.t) {
			sources[c.data.t] = 0;
		}
		else {
			c.data.searchSources.map(function(key) {
				sources[key] = 0;
			});
		}
		$scope.data.results.map(function(item) {
			var sourceId = _.get(item, 'type');
			if (sources[sourceId])
				sources[sourceId]++;
			else
				sources[sourceId] = 1;
		});
		var searchSources = [];
		Object.keys(sources).map(function(key) {
			var source_id = c.data.searchSourceConfiguration[key];
			searchSources.push({
				source_id: source_id,
				number_of_results: sources[key]
			});
		});
		return searchSources;
	}

	function getSearchResultsSignals($scope) {
		return $scope.data.results.map(function(item) {
			var recordId = item.sys_id;
			var tableName = item.table;
			
			return {
				record_id: recordId,
				table_name: tableName
			};
		});
	}

	function pageChanged(newUrl, oldUrl) {
		var newUrlParams = newUrl.match(/id=.+/),
		oldUrlParams = oldUrl.match(/id=.+/);

		if(!newUrlParams && !oldUrlParams) {
			return false;
		}

		if((!newUrlParams && oldUrlParams) || (newUrlParams && !oldUrlParams)) {
			return true;
		}

		return newUrlParams[0].split("&")[0] !== oldUrlParams[0].split("&")[0];
	}

	function getResultDescription(result){
		var description = null;
		if(result.name != null)
			description = result.name;
		else if(result.primary != null)
			description = result. primary;
		else if(result.sec_title != null)
			description = result.sec_title;
		return description;
	}

	function trackSearchResultClicked(resultClicked, rank) {
		if (!rank || rank < 1) return ;
		var c = $scope;
		var query = _.get(c.data, 'q');
		var results = _.get(c.data, 'results', []);
		
		var result = results.find(function(e) {
			  return e.primary.trim() === resultClicked.trim();
		});
	
		var sourceTable = result.table != null ? result.table : null;

		var payloadObject = {
			action: "GlideSPSearchAnalytics",
			payload: {
				query: query,
				portal_id: c.portal.sys_id,
				page_id: $scope.page && $scope.page.id,
				results_per_source: getSearchSources(c),
				refinement_occurred: false,
				browser_info: $window.navigator.userAgent,
				location: {
					latitude: $scope.latitude,
					longitude: $scope.longitude
				},
				result_event_sys_id : result.sys_id,
				label_description : getResultDescription(result),
				source_table: sourceTable,
				signal_type: "CLICK",
				signal_value: rank
			}
		};

		$window.spSearchAnalytics = {
			query: query
		};

		c.server.get(payloadObject);
	}
	
	// Event delegation for Updating click rank
	$(".panel").on('click', '.result-item a', function(e) {
		var index = $(e.currentTarget).parent().parent().data('index');
		var resultClicked = e.currentTarget.innerText;
		trackSearchResultClicked(resultClicked, index+1);
	});
	
}]]></client_script>
        <controller_as>c</controller_as>
        <css>a.question-tag {
    color: #39739d;
    background-color: #e1ecf4;
    border: 1px solid #e1ecf4;
    display: inline-block;
    margin: 4px 4px 4px 0;
    border-radius: 0;
    text-align: center;
    line-height: 1;
    padding: .4em .5em;
}

.sc {
  i.ta-icon, i.ta-img {
    width: 30px;
    height: 30px;
    line-height: 20px;
    background-size: contain;
    display: inline-block;
    background-repeat: no-repeat;
    background-position: center center;
    text-align: center;
    float:left;
    padding-right: 8px;
  }
}
.result-item {
  word-break: break-word;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>quebec_search_page</id>
        <internal>false</internal>
        <link><![CDATA[function(scope) {
	var lazyLoader = $injector.get("lazyLoader");
	lazyLoader.putTemplates(scope.data.resultTemplates);
}]]></link>
        <name>Quebec Search Page</name>
        <option_schema>[{"hint":"Show search result relative ranking","name":"show_score","section":"other","label":"Show score","type":"boolean"},{"hint":"Maximum number of search results when not specifying a search group (default 30)","name":"max_all","section":"Behavior","label":"Max results for All search","type":"integer"},{"hint":"Maximum number of search results when specifying a search group (default 15)","name":"max_group","section":"Behavior","label":"Max results for single search source","type":"integer"},{"name":"show_did_you_mean","default_value":"false","section":"Behavior","label":"Show Did You Mean","type":"boolean"}]</option_schema>
        <public>true</public>
        <roles/>
        <script><![CDATA[if (input && input.action === "GlideSPSearchAnalytics") {
	input.action = "";
	var textSearchAnalytics = $sp.publishSearchAnalytics(JSON.stringify(input.payload));
	return ;
}

// populate the 'data' variable
data.showPrices = $sp.showCatalogPrices();
data.q = $sp.getParameter('q');
data.t = $sp.getParameter('t');
data.results = [];
data.searchSources = [];
data.searchSourceConfiguration = {};
//Provide searchType, portal and page information for Service Portal search analytics
data.searchType = "search";
data.isLocationTrackerDisabled = gs.getProperty('glide.service_portal.disable_location_tracker');
var pageId = $sp.getParameter('id');
var pageGr = null;
if (pageId)
	pageGr = new GlideRecord('sp_page');
if (pageGr && pageGr.get('id', pageId))
	data.page = pageGr.getUniqueValue();
var portalRecord = $sp.getPortalRecord();
data.portal = portalRecord && portalRecord.getUniqueValue();

options.show_did_you_mean = (options.show_did_you_mean == true || options.show_did_you_mean == "true");

if (data.t)
	data.limit = options.max_group || 15;
else
	data.limit = options.max_all || 30;

//Gotta decide if we want to use the portal's sources, or use the defaults declared by
//the sys property
var useDefaultPortals;
if (!$sp.getPortalRecord()) {
	useDefaultPortals = true;
} else {
	var searchSourcesForPortalGR = new GlideRecord("m2m_sp_portal_search_source");
	searchSourcesForPortalGR.addQuery("sp_portal", $sp.getPortalRecord().getUniqueValue());
	searchSourcesForPortalGR.query();
	useDefaultPortals = searchSourcesForPortalGR.getRowCount() == 0;
}

data.resultTemplates = {};

if (useDefaultPortals) {
	var defaultSearchSourceGR = new GlideRecord("sp_search_source");
	var defaultSearchSourceIDList = gs.getProperty("glide.service_portal.default_search_sources", "");
	defaultSearchSourceGR.addQuery("sys_id", "IN", defaultSearchSourceIDList);
	if (data.t)
		defaultSearchSourceGR.addQuery("id", data.t);
	defaultSearchSourceGR.query();
	while(defaultSearchSourceGR.next()) {
		data.resultTemplates["sp-search-source-" + defaultSearchSourceGR.getValue("id") + ".html"] = $sp.translateTemplate(defaultSearchSourceGR.getValue("search_page_template"));
		getResults(defaultSearchSourceGR);
		var SearchSourceId = defaultSearchSourceGR.getValue("id");
		data.searchSources.push(SearchSourceId);
		data.searchSourceConfiguration[SearchSourceId] = defaultSearchSourceGR.getValue("sys_id");
	}
} else {
	var m2mSearchSourceGR = new GlideRecord("m2m_sp_portal_search_source");
	if (data.t)
		m2mSearchSourceGR.addQuery("sp_search_source.id", data.t);
	m2mSearchSourceGR.addQuery("sp_portal", $sp.getPortalRecord().getUniqueValue());
	m2mSearchSourceGR.query();
	while(m2mSearchSourceGR.next()) {
		var searchSourceGR = m2mSearchSourceGR.getElement("sp_search_source").getRefRecord();
		data.resultTemplates["sp-search-source-" + searchSourceGR.getValue("id") + ".html"] = $sp.translateTemplate(searchSourceGR.getValue("search_page_template"));
		getResults(searchSourceGR);
		var SearchSourceId = searchSourceGR.getValue("id");
		data.searchSources.push(SearchSourceId);
		data.searchSourceConfiguration[SearchSourceId] = searchSourceGR.getValue("sys_id");
	}
}

function getResults(gr) {
	//Check if the user is allowed to see this source.
	if ($sp.isUserCriteriaEnabled()) {
		if (!$sp.userCanSeeSearchSourceByCriteria(gr.getUniqueValue()))
			return;
	} else {
		var gs = GlideSession.get();
		var searchSourceRoles = gr.getValue("roles");
		if (searchSourceRoles && !gs.hasRole(searchSourceRoles))
			return;
	}

	if (gr.is_scripted_source) {
		var input = {};
		input.query = data.q;
		input.facets = {};
		input.indexGroup = 'portal_index_group';
		var evaluator = new GlideScopedEvaluator();
		var results = evaluator.evaluateScript(gr, "data_fetch_script", input);
		if(results) {
			results.forEach(function(item) {
				item.templateID = "sp-search-source-" + gr.getValue("id") + ".html";
				data.results.push(item);
			});
		}
	} else {
		var primaryField = gr.getValue("primary_display_field");
		var displayFields = gr.getValue("display_fields");

		var resultGR = new GlideRecordSecure(gr.getValue("source_table"));
		var condition = gr.getValue("condition");
		if (condition)
			resultGR.addEncodedQuery(condition);
		if (data.q)
			resultGR.addQuery('123TEXTQUERY321', data.q);
		resultGR.query();

		var searchTableCount = 0;
		while (resultGR.next() && searchTableCount < data.limit) {
			if (!resultGR.canRead())
				continue;

			var secondaryValues = [];

			if (displayFields)
				displayFields.split(",").forEach(function(field) {
					var obj = getField(resultGR, field);
					secondaryValues.push(obj);
				});

			data.results.push({
				score: parseInt(resultGR.ir_query_score.getDisplayValue()),
				primary: (primaryField) ? resultGR.getValue(primaryField) : resultGR.getDisplayValue(),
				sys_id: resultGR.getUniqueValue(),
				table: resultGR.getTableName(),
				templateID: "sp-search-source-" + gr.getValue("id") + ".html",
				fields: secondaryValues,
				type: gr.getValue("id")
			});
			searchTableCount++;
		}
	}

	if (data.results.length == 0 && options.show_did_you_mean) {
		var didYouMean = new GlideTSDidYouMean();
		var suggestions = [];
		data.suggestions = [];
		if (data.t == 'kb')
			suggestions = didYouMean.getAlternatePhrases(data.q, 'kb_knowledge');
		else if (data.t == 'sc')
			suggestions = didYouMean.getAlternatePhrases(data.q, 'sc_cat_item');
		else
			suggestions = didYouMean.getAlternatePhrases(data.q, gr.getValue("source_table"));

		for(var i=0; i<suggestions.size(); i++) {
			 if(data.suggestions.indexOf(suggestions.get(i) + '') == -1)
					data.suggestions.push(suggestions.get(i) + '');
		}
	}
}

function getField(gr, name) {
	var f = {};
	f.display_value = gr.getDisplayValue(name);
	f.value = gr.getValue(name);
	var ge = gr.getElement(name);
	if (ge == null)
		return f;

	f.type = ge.getED().getInternalType()
	f.label = ge.getLabel();
	return f;
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>choskins</sys_created_by>
        <sys_created_on>2021-05-04 19:16:27</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>84fb3d23dbf32c10bb5a4a2813961955</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Quebec Search Page</sys_name>
        <sys_package display_value="GDEP" source="470c1443db2f0858eeb32ad94b9619de">470c1443db2f0858eeb32ad94b9619de</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="GDEP">470c1443db2f0858eeb32ad94b9619de</sys_scope>
        <sys_update_name>sp_widget_84fb3d23dbf32c10bb5a4a2813961955</sys_update_name>
        <sys_updated_by>choskins</sys_updated_by>
        <sys_updated_on>2021-05-04 19:16:27</sys_updated_on>
        <template><![CDATA[<div>
  <div class="panel panel-default">
    <div ng-if="data.results.length==0">
      <div class="panel-heading"><h2 class="h4 panel-title">${No results}</h2></div>
      <div class="panel-body wrapper break-word">
        <p>${Your search - <b>{{data.q}}</b> - did not match any documents}</p>
        <div ng-if="options.show_did_you_mean && data.suggestions.length > 0">
          ${Did you mean}:
          <ul>
            <li ng-repeat="term in ::data.suggestions track by $index">
              <a href="javascript:void(0)" ng-click="search(term)">{{::term}}</a>
            </li>
          </ul>
        </div>
        <p ng-if="options.show_did_you_mean && data.suggestions.length > 0">${Other suggestions}:</p>
        <p ng-if="!options.show_did_you_mean || data.suggestions.length == 0">${Suggestions}:</p>
        <ul>
          <li>${Make sure all words are spelled correctly}</li>
          <li>${Try different, more general, or fewer keywords}</li>
        </ul>
      </div>
    </div>

    <div ng-if="data.results.length>0" class="panel-heading break-word">
      <h2 class="h4 panel-title">${Search results for '{{data.q}}'}</h2>
    </div>

    <div role="list" >
      <div role="listitem" ng-repeat="item in data.results | orderBy:'-score' | limitTo:data.limit" class="panel-body b-b result-item">
        <div ng-include="item.templateID" data-index="{{$index}}"></div>
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
